//This is autogenerated file. All changes will be lost after code generation.
import 'package:nsg_data/nsg_data.dart';
// ignore: unused_import
import 'dart:typed_data';
import '../data_controller_model.dart';
import '../enums.dart';

/// Уведомление
class NotificationDocGenerated extends NsgDataItem {
  static const nameId = 'id';
  static const nameDate = 'date';
  static const nameDateRead = 'dateRead';
  static const nameComment = 'comment';
  static const nameTaskId = 'taskId';
  static const nameTaskOldStatusId = 'taskOldStatusId';
  static const nameTaskNewStatusId = 'taskNewStatusId';
  static const nameAssigneeId = 'assigneeId';
  static const nameNotificationType = 'notificationType';
  static const nameUserAccountId = 'userAccountId';

  static final Map<String, String> fieldNameDict = {
    nameDate: 'Дата документа',
    nameDateRead: 'Дата просмотра',
    nameComment: 'Комментарий',
  };

  @override
  String get typeName => 'NotificationDoc';

  @override
  void initialize() {
    addField(NsgDataStringField(nameId), primaryKey: true);
    addField(NsgDataDateField(nameDate), primaryKey: false);
    addField(NsgDataDateField(nameDateRead), primaryKey: false);
    addField(NsgDataStringField(nameComment), primaryKey: false);
    addField(NsgDataReferenceField<TaskDoc>(nameTaskId), primaryKey: false);
    addField(NsgDataReferenceField<TaskStatus>(nameTaskOldStatusId), primaryKey: false);
    addField(NsgDataReferenceField<TaskStatus>(nameTaskNewStatusId), primaryKey: false);
    addField(NsgDataReferenceField<UserAccount>(nameAssigneeId), primaryKey: false);
    addField(NsgDataEnumReferenceField<ENotificationType>(nameNotificationType), primaryKey: false);
    addField(NsgDataReferenceField<UserAccount>(nameUserAccountId), primaryKey: false);
    fieldList.fields[nameDate]?.presentation = 'Дата документа';
    fieldList.fields[nameDateRead]?.presentation = 'Дата просмотра';
    fieldList.fields[nameComment]?.presentation = 'Комментарий';
  }

  @override
  NsgDataItem getNewObject() => NotificationDoc();

  /// Идентификатор
  @override
  String get id => getFieldValue(nameId).toString();

  @override
  set id(String value) => setFieldValue(nameId, value);

  /// ДатаДокумента
  DateTime get date => getFieldValue(nameDate) as DateTime;

  set date(DateTime value) => setFieldValue(nameDate, value);

  /// ДатаПросмотра
  DateTime get dateRead => getFieldValue(nameDateRead) as DateTime;

  set dateRead(DateTime value) => setFieldValue(nameDateRead, value);

  /// Комментарий
  String get comment => getFieldValue(nameComment).toString();

  set comment(String value) => setFieldValue(nameComment, value);

  /// Задача
  String get taskId => getFieldValue(nameTaskId).toString();
  TaskDoc get task => getReferent<TaskDoc>(nameTaskId);
  Future<TaskDoc> taskAsync() async {
   return await getReferentAsync<TaskDoc>(nameTaskId);
  }

  set taskId(String value) => setFieldValue(nameTaskId, value);
  set task(TaskDoc value) =>
    setFieldValue(nameTaskId, value.id);

  /// СтарыйСтатус
  String get taskOldStatusId => getFieldValue(nameTaskOldStatusId).toString();
  TaskStatus get taskOldStatus => getReferent<TaskStatus>(nameTaskOldStatusId);
  Future<TaskStatus> taskOldStatusAsync() async {
   return await getReferentAsync<TaskStatus>(nameTaskOldStatusId);
  }

  set taskOldStatusId(String value) => setFieldValue(nameTaskOldStatusId, value);
  set taskOldStatus(TaskStatus value) =>
    setFieldValue(nameTaskOldStatusId, value.id);

  /// НовыйСтатус
  String get taskNewStatusId => getFieldValue(nameTaskNewStatusId).toString();
  TaskStatus get taskNewStatus => getReferent<TaskStatus>(nameTaskNewStatusId);
  Future<TaskStatus> taskNewStatusAsync() async {
   return await getReferentAsync<TaskStatus>(nameTaskNewStatusId);
  }

  set taskNewStatusId(String value) => setFieldValue(nameTaskNewStatusId, value);
  set taskNewStatus(TaskStatus value) =>
    setFieldValue(nameTaskNewStatusId, value.id);

  /// Исполнитель
  String get assigneeId => getFieldValue(nameAssigneeId).toString();
  UserAccount get assignee => getReferent<UserAccount>(nameAssigneeId);
  Future<UserAccount> assigneeAsync() async {
   return await getReferentAsync<UserAccount>(nameAssigneeId);
  }

  set assigneeId(String value) => setFieldValue(nameAssigneeId, value);
  set assignee(UserAccount value) =>
    setFieldValue(nameAssigneeId, value.id);

  /// ТипУведомления
  ENotificationType get notificationType => NsgEnum.fromValue(ENotificationType, getFieldValue(nameNotificationType)) as ENotificationType;

  set notificationType(ENotificationType value) => setFieldValue(nameNotificationType, value);

  /// АккаунтПользователя
  String get userAccountId => getFieldValue(nameUserAccountId).toString();
  UserAccount get userAccount => getReferent<UserAccount>(nameUserAccountId);
  Future<UserAccount> userAccountAsync() async {
   return await getReferentAsync<UserAccount>(nameUserAccountId);
  }

  set userAccountId(String value) => setFieldValue(nameUserAccountId, value);
  set userAccount(UserAccount value) =>
    setFieldValue(nameUserAccountId, value.id);

  @override
  String get apiRequestItems {
    return '/Data/Notification';
  }
}
