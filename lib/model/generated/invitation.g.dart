//This is autogenerated file. All changes will be lost after code generation.
import 'package:nsg_data/nsg_data.dart';
// ignore: unused_import
import 'dart:typed_data';
import '../data_controller_model.dart';

/// Приглашение
class InvitationGenerated extends NsgDataItem {
  static const nameId = 'id';
  static const nameDate = 'date';
  static const nameDateResponse = 'dateResponse';
  static const nameComment = 'comment';
  static const nameIsAccepted = 'isAccepted';
  static const nameProjectId = 'projectId';
  static const nameAuthorId = 'authorId';
  static const nameInvitedUserId = 'invitedUserId';

  static final Map<String, String> fieldNameDict = {
    nameDate: 'Дата документа',
    nameDateResponse: 'Дата ответа',
    nameComment: 'Комментарий',
    nameIsAccepted: 'Принято',
  };

  @override
  String get typeName => 'Invitation';

  @override
  void initialize() {
    addField(NsgDataStringField(nameId), primaryKey: true);
    addField(NsgDataDateField(nameDate), primaryKey: false);
    addField(NsgDataDateField(nameDateResponse), primaryKey: false);
    addField(NsgDataStringField(nameComment), primaryKey: false);
    addField(NsgDataBoolField(nameIsAccepted), primaryKey: false);
    addField(NsgDataReferenceField<ProjectItem>(nameProjectId), primaryKey: false);
    addField(NsgDataReferenceField<UserAccount>(nameAuthorId), primaryKey: false);
    addField(NsgDataReferenceField<UserAccount>(nameInvitedUserId), primaryKey: false);
    fieldList.fields[nameDate]?.presentation = 'Дата документа';
    fieldList.fields[nameDateResponse]?.presentation = 'Дата ответа';
    fieldList.fields[nameComment]?.presentation = 'Комментарий';
    fieldList.fields[nameIsAccepted]?.presentation = 'Принято';
  }

  @override
  NsgDataItem getNewObject() => Invitation();

  /// Идентификатор
  @override
  String get id => getFieldValue(nameId).toString();

  @override
  set id(String value) => setFieldValue(nameId, value);

  /// ДатаДокумента
  DateTime get date => getFieldValue(nameDate) as DateTime;

  set date(DateTime value) => setFieldValue(nameDate, value);

  /// ДатаОтвета
  DateTime get dateResponse => getFieldValue(nameDateResponse) as DateTime;

  set dateResponse(DateTime value) => setFieldValue(nameDateResponse, value);

  /// Комментарий
  String get comment => getFieldValue(nameComment).toString();

  set comment(String value) => setFieldValue(nameComment, value);

  /// Принято
  bool get isAccepted => getFieldValue(nameIsAccepted) as bool;

  set isAccepted(bool value) => setFieldValue(nameIsAccepted, value);

  /// Проект
  String get projectId => getFieldValue(nameProjectId).toString();
  ProjectItem get project => getReferent<ProjectItem>(nameProjectId);
  Future<ProjectItem> projectAsync() async {
   return await getReferentAsync<ProjectItem>(nameProjectId);
  }

  set projectId(String value) => setFieldValue(nameProjectId, value);
  set project(ProjectItem value) =>
    setFieldValue(nameProjectId, value.id);

  /// Автор
  String get authorId => getFieldValue(nameAuthorId).toString();
  UserAccount get author => getReferent<UserAccount>(nameAuthorId);
  Future<UserAccount> authorAsync() async {
   return await getReferentAsync<UserAccount>(nameAuthorId);
  }

  set authorId(String value) => setFieldValue(nameAuthorId, value);
  set author(UserAccount value) =>
    setFieldValue(nameAuthorId, value.id);

  /// Адресат
  String get invitedUserId => getFieldValue(nameInvitedUserId).toString();
  UserAccount get invitedUser => getReferent<UserAccount>(nameInvitedUserId);
  Future<UserAccount> invitedUserAsync() async {
   return await getReferentAsync<UserAccount>(nameInvitedUserId);
  }

  set invitedUserId(String value) => setFieldValue(nameInvitedUserId, value);
  set invitedUser(UserAccount value) =>
    setFieldValue(nameInvitedUserId, value.id);

  @override
  String get apiRequestItems {
    return '/Data/Invitation';
  }
}
